Carles Mateo

This is the changelog file where I explain all the changes done.
It is much more explicit that it would be in real use, so you can see what steps I did to fix and extend your code.
The history starts from the bottom and goes up.

2014-02-11
Finished the extra page for search service
Pass parameter page to check:
http://json.aeriatest.loc/search/description+author?q=a&page=2

Finished the extra page for list service
Pass parameter page to check:
http://json.aeriatest.loc/list?genre=Fantasy&page=1
Only shows the page 1 (in groups of 5 registers)

http://json.aeriatest.loc/list?genre=Fantasy&page=2
Shows the page 2 or <results></results> if there was no page 2.

http://json.aeriatest.loc/list?genre=Fantasy
Shows all the registers for genre=Fantasy

http://json.aeriatest.loc/list?page=2
Shows page 2 for all the registers

http://json.aeriatest.loc/list?page=3
Shows page 3 for all the registers (only one result in page 3)

Finished the extra JSON
Some distributions have disables json extensions due to license conflicts. Do:
    sudo apt-get install php5-json
    sudo service apache2 restart
to resolve this in Ubuntu 13.10. Otherwise you'll get a PHP Fatal error:  Call to undefined function json_encode() in /www/aeriagamestest/services/get.php on line 28

So for:
http://json.aeriatest.loc/get/bk102

You get:
{"operation":"get","status":"ok","result":"<book id=\"bk102\">\n  <author>Ralls, Kim<\/author>\n  <title>Midnight Rain<\/title>\n  <genre>Fantasy<\/genre>\n  <price>5.95<\/price>\n  <publish_date>2000-12-16<\/publish_date>\n  <description>A former architect battles corporate zombies, \n      an evil sorceress, and her own childhood to become queen \n      of the world.<\/description>\n<\/book>","error_code":0,"error_message":""}
With this the extra demand was done:
        + JSON output mode


2014-02-10
Created and finished search.php
With this the fourth demand was done:
        - implement the search service

Also a security system to check against injection of wrong parameters has been made.

2014-02-09
Changed list.php to allow search for 0,1,2, or 3 attributes.

Test it with:
http://json.aeriatest.loc/list?genre=Fantasy&author=Ralls,%20Kim&price=5.95
http://xml.aeriatest.loc/list?genre=Fantasy&author=Ralls,%20Kim&price=5.95
http://html.aeriatest.loc/list?genre=Fantasy&author=Ralls,%20Kim&price=5.95
With this the third demand was done:
        - implement the filter handling for the list service

2014-02-08
Changed get.php to allow search for id attribute of books with xpath:
// XPATH query
$results = $o_books->xpath->query('/catalog/book[@id=\''.$book_id.'\']');
With this the second demand was done:
        - finish the get service

Fixed bug in core/basics.php : The autoload tries to load in the PATH/library but the right folder name is PATH/libraries
To fix it a new constant was created: PATH_LIBRARIES.
With this the first demand was done:
        - get rid of the errors blocking the services

2014-02-07
Created a constant for the type of response. Constants are visible inside classes and across all the code so this will be very straightforward.

Added a filter based on the url used. If the url called is json.aeriatest.loc then the response will be sent in Json format. If is html.aeriatest.loc then the response will be in html format. (easier for debug)

I start replacing all the " double quotes for ' single quotes, because is much more performant in PHP. (magic quotes use more CPU and if it is not necessary to replace with variables and special chars inside, is better to go with single quotes).

Added catfwcore/requests.class. That is one of the classes from my PHP Framework. It is a good sample of hte glueless use of the classes, and the namespaces.

Created catfwcore/ folder to put my core classes, separated from the original from the exercise.

Refactor form $books to $o_books to reflect that we deal with an Object.

